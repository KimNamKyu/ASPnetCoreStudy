Enterprise Architecture

다양한 플랫폼을 지원

DB를 중복으로 작성하지 않고 공통된것을
같이 사용할 수 없느냐?

>> 대형 솔루션, 프로그램 개발 사용하는 프로젝트 구성방식


예를 들어 DB통신부분이 있다.

1. 리스트 출력
2. 상세 정보 출력

이 어떤 코드 잇다고 하자.

관리하는 사람이 웹을 쓰느냐?
사용자는 웹을 사용하지만
관리자가 주문현황등을 윈도우 프로그램으로 사용할수도있다.

모든 프로그램들이 한가지의 DB를 공통으로 사용하기떄문에 한가지 DB를 사용해서 공통으로 사용한다는 거지.

DB의 코드 구현을 피하고 한곳에서 통합 프로그램을 개발하도록 하는것 이 엔터프라이즈 아키텍쳐
== 다양한 플랫폼을 구성할수 있게 가능하다.

기존은 웹 단독 프로그램이다. 

기존 using 한것을 다없애야한다. 

엔터프라이즈 아키텍쳐를 사용하면 모든 플랫폼이 동일하게 적용가능하다. 


1. 데이터 엑세스 계층
   DB 통신 (validation check 는 X)


2. 비지니스 로직 계층
   동일하게 사용하는 것은 무엇일까?
   ex) Validation check
   상품이 가지는 유니크한 값(기본키)

캐시(Cache)
- 목적 : 자주 불러오는 데이터를 메모리에 담아서 출력하는 것
- 장점 : 컴퓨팅 비용이 감소한다.
DB에서 다시 불러오는 것보다 메모리에 담아두었다가 다시 사용하기 때문에 빠르다.
메모리에 그 데이터를 담아 놓는다.   
하드를 접근하지않고 메모리에 접근한다.
데이터 출력 속도가 빠르다.

단점 : 메모리를 많이 필요로 하게 된다.
Azure 클라우딩 컴퓨팅의 발달로 보완됨.

3. 프리젠테이션 계층
- 사용자가 쓰는 플랫폼의 총칭
  winform, wpf, webform, Xamarin

비지니스 로직과 데이터 엑세스
클래스라이브러리 dll(동적 링크 라이브러리)

API 구성할때 사용.


# 클래스 라이브러리 종류

예)
Asp.net 닷넷 프레임워크

data 클래스 라이브러리 (닷넷코어)

# 각 Tier 별로 접근 순서

클라이언트 버튼 -> ASP.NET MVC 리스트 출력 호출
->Bll 을 통해 호출 -> IDAL 로 이동 -> 매칭된 DAL 이 조회 후  return 한 값이 -> Bll이 받아서 ->
MVC에 뿌려주는 것



<코드설명>
특정 1번 유저를 가져오려고 해
























